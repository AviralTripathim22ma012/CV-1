# -*- coding: utf-8 -*-
"""m22ma012_Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/182yLt0_AlO9-ci6KeBrxAEmhL2efx1IZ

**Q4: FINDING ANGLE BETWEEN MINUTE AND HOUR HANDS OF A CLOCK**
"""

import cv2
import numpy as np

''' Read image'''
image = cv2.imread('/content/clock_2.jpg')
img= image.copy()

''' Convert image to grayscale'''
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

''' Use canny edge detection'''
edges = cv2.Canny(gray,50,150,apertureSize=3)

''' Apply HoughLinesP method to
 to directly obtain line end points'''
lines_list =[]
lines = cv2.HoughLinesP(
			edges,
			1, 
			np.pi/180, 
			threshold=130,
			minLineLength=5, 
			maxLineGap=10 
			)

''' Iterate over points'''
for points in lines:
	''' Extracted points nested in the list'''
	x1,y1,x2,y2=points[0]
	''' Draw the lines joing the points
	    On the original image'''
	cv2.line(image,(x1,y1),(x2,y2),(0,255,0),2)
	''' Maintain a simples lookup list for points'''
	lines_list.append([(x1,y1),(x2,y2)])
	
''' Save the result image'''
cv2.imwrite('detectedLines.png',image)

line1 = lines[0][0]
line2 = lines[1][0]

'''Extract the end points of the two lines'''
x1, y1, x2, y2 = line1
x3, y3, x4, y4 = line2

'''Calculate the angle between the two lines'''
angle = np.arctan2(y4-y3, x4-x3) - np.arctan2(y2-y1, x2-x1)

'''Convert to degrees'''
angle = np.rad2deg(angle)

'''Print the angle'''
print("Angle between the two lines:", 180- angle)

from google.colab.patches import cv2_imshow

cv2_imshow(img)
detected= cv2.imread('/content/detectedLines.png')
cv2_imshow(detected)

import cv2
import numpy as np

''' Read image'''
image = cv2.imread('/content/clock_1.png')
img= image.copy()

''' Convert image to grayscale'''
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

''' Use canny edge detection'''
edges = cv2.Canny(gray,50,150,apertureSize=3)

''' Apply HoughLinesP method to
 to directly obtain line end points'''
lines_list =[]
lines = cv2.HoughLinesP(
			edges,
			1, 
			np.pi/180, 
			threshold= 7,
			minLineLength=70, 
			maxLineGap=10 
			)

''' Iterate over points'''
for points in lines:
	''' Extracted points nested in the list'''
	x1,y1,x2,y2=points[0]
	''' Draw the lines joing the points
	    On the original image'''
	cv2.line(image,(x1,y1),(x2,y2),(0,255,0),2)
	''' Maintain a simples lookup list for points'''
	lines_list.append([(x1,y1),(x2,y2)])
	
''' Save the result image'''
cv2.imwrite('detectedLines.png',image)

line1 = lines[0][0]
line2 = lines[1][0]

'''Extract the end points of the two lines'''
x1, y1, x2, y2 = line1
x3, y3, x4, y4 = line2

'''Calculate the angle between the two lines'''
angle = np.arctan2(y4-y3, x4-x3) - np.arctan2(y2-y1, x2-x1)

'''Convert to degrees'''
angle = np.rad2deg(angle)

'''Print the angle'''
print("Angle between the two lines:", angle)

from google.colab.patches import cv2_imshow

cv2_imshow(img)
detected= cv2.imread('/content/detectedLines.png')
cv2_imshow(detected)
