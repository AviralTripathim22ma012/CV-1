# -*- coding: utf-8 -*-
"""m22ma012_Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CbH73wHjOzu0_EfIvtYv_yv6Z_lX-Fuq

**Q5: LANDMARK IMAGES**
"""

import cv2 as cv
import matplotlib.pyplot as plt 
from google.colab.patches import cv2_imshow


img_1= cv.imread('/content/Amsterdam_Tulpen_Museum_1.jpg')
img_2= cv.imread('/content/ansterdam_tulip_museum_2.jpg')
img_3= cv.imread('/content/amsterdam_tulip_museum_3.jpg')

cv2_imshow(img_1)
cv2_imshow(img_2)
cv2_imshow(img_3)

print("   ")
print("   ")

resized_1= cv.resize(img_1, (256,256))
resized_2= cv.resize(img_2, (256,256))
resized_3= cv.resize(img_3, (256,256))

cv2_imshow(resized_1)
cv2_imshow(resized_2)
cv2_imshow(resized_3)

import cv2

grey_1 = cv.cvtColor(resized_1, cv2.COLOR_BGR2GRAY)
grey_2 = cv.cvtColor(resized_2, cv2.COLOR_BGR2GRAY)
grey_3 = cv.cvtColor(resized_3, cv2.COLOR_BGR2GRAY)

cv2_imshow(grey_1)
cv2_imshow(grey_2)
cv2_imshow(grey_3)

# average image 
average_img= cv.add(grey_1/3, grey_2/3, grey_3/3)
from google.colab.patches import cv2_imshow
cv2_imshow(average_img)

# subtracting image 1 from 2

sub_1_2= cv.subtract(grey_1, grey_2)
cv2_imshow(sub_1_2)

# gaussian noise to image 1

import numpy as np
prob= 0.05

output = np.zeros(resized_1.shape,np.uint8)
thres = 1 - prob 
for i in range(resized_1.shape[0]):
  for j in range(resized_1.shape[1]):
    rdn = np.random.random()
    if rdn < prob:
      output[i][j] = 0
    elif rdn > thres:
      output[i][j] = 255
    else:
      output[i][j] = resized_1[i][j]

cv2_imshow(output)

# removing noise

denoised_img= cv.medianBlur(output, 5)
cv2_imshow(denoised_img)

# using the given kernel to one of the images (resized_1)
kernel= np.array([[-1,-1,-1], [0,0,0], [1,1,1]])
output= cv.filter2D(resized_1, -1, kernel)
cv2_imshow(output)
