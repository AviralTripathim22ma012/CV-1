# -*- coding: utf-8 -*-
"""m22ma012_Q6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YYKUV1HcefT1qxBp8BgTGNtYquNWkN-3

**Q6: DIGIT RECOGNITION ON MNIST DATASET**
"""

import os
import numpy as np
import cv2
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

def compute_hpp_features(img):
    ''' Compute horizontal projection profile'''
    hpp = np.sum(img, axis=1)

    ''' Normalize hpp'''
    hpp = hpp / np.max(hpp)

    return hpp

def load_images(folder):
    images = []
    labels = []
    folder1=str(folder)
    for i in range(2):
      folder=folder+str(i)
      print()

      for filename in os.listdir(folder):
          img = cv2.imread(os.path.join(folder, filename), cv2.IMREAD_GRAYSCALE)
          images.append(compute_hpp_features(img))
          labels.append(i)
      folder=folder1

    return np.array(images), np.array(labels)

folder_0 = "/content/drive/MyDrive/"

x_0, y_0 = load_images(folder_0)

print(x_0)
print(y_0)
print(len(y_0))

x_train, x_test, y_train, y_test = train_test_split(x_0, y_0, test_size=0.2, random_state=0)

''' # Train NN classifier'''
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train, y_train)

''' Evaluate NN classifier'''
y_pred = knn.predict(x_test)
nn_accuracy = accuracy_score(y_test, y_pred)

''' Train SVM classifier'''
svm = SVC()
svm.fit(x_train, y_train)

'''Evaluate SVM classifier'''
y_pred = svm.predict(x_test)
svm_accuracy = accuracy_score(y_test, y_pred)

print("Nearest Neighbor accuracy:", nn_accuracy)
print("Support Vector Machine accuracy:", svm_accuracy)
